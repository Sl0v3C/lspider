/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "lcrawler_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace lcrawler {


IUrl::~IUrl() throw() {
}


void IUrl::__set_str(const std::string& val) {
  this->str = val;
}

void IUrl::__set_ip(const std::string& val) {
  this->ip = val;
}

void IUrl::__set_hub(const bool val) {
  this->hub = val;
}

const char* IUrl::ascii_fingerprint = "7F21FB535884165D6350077C7B970E93";
const uint8_t IUrl::binary_fingerprint[16] = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};

uint32_t IUrl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str);
          this->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hub);
          this->__isset.hub = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IUrl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("IUrl");

  xfer += oprot->writeFieldBegin("str", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->str);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hub", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->hub);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(IUrl &a, IUrl &b) {
  using ::std::swap;
  swap(a.str, b.str);
  swap(a.ip, b.ip);
  swap(a.hub, b.hub);
  swap(a.__isset, b.__isset);
}

IUrl::IUrl(const IUrl& other0) {
  str = other0.str;
  ip = other0.ip;
  hub = other0.hub;
  __isset = other0.__isset;
}
IUrl& IUrl::operator=(const IUrl& other1) {
  str = other1.str;
  ip = other1.ip;
  hub = other1.hub;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const IUrl& obj) {
  using apache::thrift::to_string;
  out << "IUrl(";
  out << "str=" << to_string(obj.str);
  out << ", " << "ip=" << to_string(obj.ip);
  out << ", " << "hub=" << to_string(obj.hub);
  out << ")";
  return out;
}

} // namespace
